
simplify
========

simplify formula

SYNTAX
- simplify(A) 
- simplify(A, S) 
- simplify(A, S, N) 
- simplify(T) 
- simplify(T, S) 
- simplify(T, S, N) 

PARAMETERS
- A: formula
- T: theory
- S: one of  "synt" ,  "sort" ,  "provable" 
- N: natural number,  N >= 1 

RESULT:  formula resp. theory

SYNOPSIS

- One argument:  simplify  simplifies the formula  A  resp. the theory  T . 
  Parts that cannot be simplified remain unchanged.
- The simplification relies on the search for `equivalent' subformulas. This 
  search can be influenced by the second and the third argument.
- Second argument: Determines when two subformulas are `equivalent': 
  "synt" : Syntactically equivalent.  true  and  false  are removed. Often 
  faster than  "sort"  and  "provable" . 
  "sort" : Syntactically equivalent modulo ordering.  true  and  false  are 
  removed. 
  "provable" : Provably equivalent. Subformulas that are equivalent to  true 
  or  false  are removed. More powerful than  "synt"  and  "sort" . 
  Default:  "sort" .
- Third argument: Only subformulas with at most  N  alternations of binary 
  connectives in between are compared. 
  Default: infinite. Often a small  N  (e.g. 1 or 2) makes the 
  simplification process faster.
- Case  A : The result is equivalent to  A  (in  cpc ). 
  Case  T : The same formulas are provable in  cwa  in  T  and in the 
  result. However, in general  cwa(T)  is not equal to  cwa(simplify(T))  .
- With  set("infolevel", 3)  you obtain additional information during the 
  simplification process.

EXAMPLE

> simplify((p2 -> p3) & p0 -> p1 & p0 -> ~p4);
	(p2 -> p3) -> p1 & p0 -> ~p4
> simplify((p2 -> p3) & p0 -> p1 & p0 -> ~p3);
	p1 & p0 -> ~p3
> simplify((p2 <-> p1)
           -> (~(p4 v p3 -> (p5 <-> p4)) & ~ ~p6 -> ~(p3 v p4) v p7), "synt");
	(p2 <-> p1) -> ~(p4 v p3 -> (p5 <-> p4)) & p6 -> ~(p3 v p4) v p7
> simplify((p2 <-> p1)
           -> (~(p4 v p3 -> (p5 <-> p4)) & ~ ~p6 -> ~(p3 v p4) v p7));
	(p2 <-> p1) -> p6 -> ~(p5 <-> p4) -> ~(p4 v p3) v p7
> simplify( p0 & 
            ((p11 v p12) & (p21 v p22) & (p31 v p32)
              -> p11 & p21 v p11 & p31 v p21 & p31 v p12 & p22
                 v p12 & p32 v p22 & p32) );
	p0 & ((p11 v p12) & (p21 v p22) & (p31 v p32) -> p11 & (p21 v p31) v p21 & 
p31 v p12 & (p22 v p32) v p22 & p32)
> simplify( p0 & 
            ((p11 v p12) & (p21 v p22) & (p31 v p32)
              -> p11 & p21 v p11 & p31 v p21 & p31 v p12 & p22
                 v p12 & p32 v p22 & p32), "provable");
	p0

SEE ALSO
  convert, remove

