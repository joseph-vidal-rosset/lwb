
Language example
================


Language
--------

At first we load the module  default .

> load(default);
	default  user  

Formulas of  default  are built from the symbols for conjunction ( & ), 
disjunction ( v ), implication ( -> ), equivalence ( <-> ), negation ( ~ ), 
the two constants  true  and  false , and variables.
Theories are list of formulas.

> A := (p0 v false) & ~(p1 -> p2) <-> true;
	(p0 v false) & ~(p1 -> p2) <-> true
> B := p2 v p22;
	p2 v p22
> T := [A, B];
	[(p0 v false) & ~(p1 -> p2) <-> true, p2 v p22]
> typek(A, "fml");
	true
> typek(B[1], "var");
	true
> typek(T, "theory");
	true

You can also use  and ,  or ,  imp ,  eq ,  not  instead of  & ,  v ,  -> ,  
<-> ,  ~ .

> A1 := p0 & p1 v p2 -> p3 <-> p4; 
	p0 & p1 v p2 -> p3 <-> p4
> A2 := p0 and p1 or p2 imp p3 eq p4; 
	p0 & p1 v p2 -> p3 <-> p4
> A1 = A2;
	true

Defaults are triples, built from a formula, a list of formulas and a 
formula. A normal default is a triple of three formulas.

> d1 := [p1, [p0, p2 v p3], p0];
	[p1, [p0, p2 v p3], p0]
> typek(d1, "default");
	true
> normalp(d1);
	false
> d2 := [p1 v p3, ~p2, ~p2];
	[p1 v p3, ~p2, ~p2]
> typek(d2, "default");
	true
> normalp(d2);
	true

The intended meaning of  d2  is the following: If we can prove  p1 v p3  in 
our theory, and if we can add  ~p2  to our theory without obtaining an 
inconsistent theory, then we add  ~p2  to our theory.

A default theory is a pair built from a theory and a list of defaults.

> Td := [ [p0 v p2, p1], [d1,d2] ];
	[[p0 v p2, p1], [[p1, [p0, p2 v p3], p0], [p1 v p3, ~p2, ~p2]]]
> typek(Td, "dtheory");
	true

