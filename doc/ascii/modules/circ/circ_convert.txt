
convert
=======

convert connectives

SYNTAX
- convert(A, S1) 
- convert(A, "imp", S2) 
- convert(T, S1) 
- convert(T, "imp", S2) 

PARAMETERS
- A: formula
- T: theory
- S1: one of  "andimp" ,  "eq" ,  "impimp" 
- S2: one of  "eq" ,  "or" 

RESULT:  formula resp. theory

SYNOPSIS

- convert  converts certain occurrences of connectives in the formula  A  
  resp. in the theory  T . The result is equivalent to  A  resp. the 
  circumscription theories of  T  (with arbitrary  Lp ,  Lq ) and the result 
  are equivalent (in  cpc ).
- Two arguments: 
  S1  is  "andimp" : Converts  B & C -> D  into  B -> C -> D . 
  S1  is  "eq" : Converts  B <-> C  into  (B -> C) & (C -> B) . 
  S1  is  "impimp" : Converts  B -> C -> D  into  B & C -> D .
- Three arguments: 
  S2  is  "eq" : Converts  (B -> C) & (B -> C) ,  (B <-> C) & (B -> C) , ... 
  into  B <-> C . Conjunctions in  A  resp. the theory  T  is arranged if 
  conversions are possible. 
  S2  is  "or" : Converts  ~B -> C  into  B v C , and  B -> C  into  ~B v C .

EXAMPLE

> convert((p1 & p2) & (p0 v p3) -> p4, "andimp");
	p1 -> p2 -> p0 v p3 -> p4
> convert((p0 -> p1) & p3 & (p1 -> p0), "imp", "eq");
	(p0 <-> p1) & p3
> convert((p1 -> p0) v ~ ~p4 -> p3 v p1, "imp", "or");
	~(~p1 v p0 v ~~p4) v (p3 v p1)
> convert([p0 -> p1, true, ~p2 <-> p3 v p0], "imp", "or");
	[~p0 v p1, true, ~p2 <-> p3 v p0]

SEE ALSO
  remove

