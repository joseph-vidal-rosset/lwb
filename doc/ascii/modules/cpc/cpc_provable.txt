
provable
========

formula provable ?
formula provable in theory ?

SYNTAX
- provable(A) 
- provable(A, T) 

PARAMETERS
- A: formula
- T: theory

RESULT:  true  or  false 

SYNOPSIS

- provable  tests whether the formula  A  is provable in  cpc .
- If a second argument is given,  provable  tests whether the formula  A  is 
  provable in  cpc  plus  T .
- If the formula is too hard for  cpc::provable , then you can try to use  
  cpc::bddsat . The formula  A  is provable iff  cpc::bddsat(not A)  is 
  false.
- Choose an appropriate infolevel for additional information during the 
  execution (e.g.  set("infolevel",4) ). 
  Displayed sequents have the form  [LV],[L1]=>[RV],[R1] . The parts of the 
  sequent contain the following formulas:  LV  and  RV : variables,  L1 :  v ,
  -> ,  <->  formulas,  R1 :  & ,  <->  formulas,

EXAMPLE

> provable((p0 -> (p1 -> p2)) & p1 -> (p0 -> p2));
	true
> provable(p0 v p2, [p0 v ~p1, p2]);
	true
> set("infolevel", 4);
	true
> provable(p0 v p1 <-> p1 v p0);
cpc::provable( A = p0 v p1 <-> p1 v p0 )
[],[]==>[],[p0 v p1 <-> p1 v p0]
(r <->)
(r v)
1.[],[p1 v p0]==>[p0, p1],[]
(l v)
1.1.[p1],[]==>[p0, p1],[]
axiom (id)
1.2.[p0],[]==>[p0, p1],[]
axiom (id)
(r v)
2.[],[p0 v p1]==>[p1, p0],[]
(l v)
2.1.[p0],[]==>[p1, p0],[]
axiom (id)
2.2.[p1],[]==>[p1, p0],[]
axiom (id)
Result of cpc::provable: true.
	true

SEE ALSO
  bddsat, consistent, satisfiable

