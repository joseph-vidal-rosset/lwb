
circ example
============


Language
--------

At first we load the module  circ .

> load(circ);
	circ  user  

The formulas of  circ  are the formulas of  cpc , i.e. they are built from 
the symbols for conjunction ( & ), disjunction ( v ), implication ( -> ), 
equivalence ( <-> ), negation ( ~ ), the two constants  true  and  false , 
and variables.
Theories are list of formulas.

> a := p <-> (q & ~false -> p) v true;
	p <-> (q & ~false -> p) v true
> b := p -> (q -> p);
	p -> q -> p
> t := [a, b, r v s];
	[p <-> (q & ~false -> p) v true, p -> q -> p, r v s]
> typek(a, "fml");
	true
> typek(b[2][1], "var");
	true
> typek(t, "theory");
	true
> unassign(a, b);

You can also use  and ,  or ,  imp ,  eq ,  not  instead of  & ,  v ,  -> ,  
<-> ,  ~ .

> c1 := p & (q v p) -> r <-> p; 
	p & (q v p) -> r <-> p
> c2 := p and (q or p) imp r eq p; 
	p & (q v p) -> r <-> p
> c1 = c2;
	true


Provability and circumscription theory
--------------------------------------

We look at an example that shows the effect of varied variables.

> t := [p0 v p1, p2];
	[p0 v p1, p2]

If we only minimize  p0 , we can prove that not both  p0  and  p1  are true, 
but we cannot prove that  p0  is false.

> provable(~(p0 & p1), t, [p0]);
	true
> provable(~p0, t, [p0]);
	false

The corresponding circumscription theory is:

> circ(t, [p0]);
	[p0 v p1, p2, ~p0 -> p1, p0 -> ~p1]

If we vary the variable  p1 , then  ~p0  becomes provable, and thus  p1  
must be true.

> provable(~p0, t, [p0], [p1]);
	true
> provable(p1, t, [p0], [p1]);
	true

The corresponding circumscription theory is:

> circ(t, [p0], [p1]);
	[p0 v p1, p2, ~p0]

