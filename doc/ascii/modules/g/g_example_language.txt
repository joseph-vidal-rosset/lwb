
Language example
================


Language
--------

At first we load the module  g .

> load(g);
	executing init_g
	g  user  

Formulas of  g  are built from the connectives  box  and  dia , from the 
connectives of classical propositional logic, namely  &  (conjunction),  v  
(disjunction),  ->  (implication),  <->  (equivalence),  ~  (negation), the 
two constants  true  and  false , and from variables.
Theories are lists of formulas.

> A := ((p0 <-> dia p1) -> ~ dia false) v p0 & true;
	((p0 <-> dia p1) -> ~dia false) v p0 & true
> B := p1 -> p55;
	p1 -> p55
> T := [A, B];
	[((p0 <-> dia p1) -> ~dia false) v p0 & true, p1 -> p55]
> typek(A, "fml");
	true
> typek(B[1], "var");
	true
> typek(T, "theory");
	true

You can also use  and ,  or ,  imp ,  eq ,  not  instead of  & ,  v ,  -> ,  
<-> ,  ~ .

> A1 := p0 & p1 v p2 -> p3 <-> p0; 
	p0 & p1 v p2 -> p3 <-> p0
> A2 := p0 and p1 or p2 imp p3 eq p0; 
	p0 & p1 v p2 -> p3 <-> p0
> A1 = A2;
	true

