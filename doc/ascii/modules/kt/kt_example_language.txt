
Language example
================


Language
--------

At first we load the module  kt .

> load(kt);
	kt  user  

Formulas of  kt  are built from the connectives  box  and  dia , from the 
connectives of classical propositional logic, namely  &  (conjunction),  v  
(disjunction),  ->  (implication),  <->  (equivalence),  ~  (negation), the 
two constants  true  and  false , and from variables.
Theories are lists of formulas.

> A := p0 -> (p1 <-> dia box(p2 & true v ~false));
	p0 -> (p1 <-> dia box (p2 & true v ~false))
> B := p7 -> p76;
	p7 -> p76
> T := [A, B];
	[p0 -> (p1 <-> dia box (p2 & true v ~false)), p7 -> p76]
> typek(A, "fml");
	true
> typek(B[1], "var");
	true
> typek(T, "theory");
	true

You can also use  and ,  or ,  imp ,  eq ,  not  instead of  & ,  v ,  -> ,  
<-> ,  ~ .

> A1 := p0 & p1 v p2 -> p3 <-> p0; 
	p0 & p1 v p2 -> p3 <-> p0
> A2 := p0 and p1 or p2 imp p3 eq p0; 
	p0 & p1 v p2 -> p3 <-> p0
> A1 = A2;
	true

In the possible world semantics,  box p0  means that  p0  is true in all 
accessible worlds, and  dia p0  means that there is an accessible world 
where  p0  is true. The accessibility relation must be reflexive.

