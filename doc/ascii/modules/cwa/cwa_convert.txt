
convert
=======

convert connectives

SYNTAX
- convert(A, S1) 
- convert(A, "imp", S2) 
- convert(T, S1) 
- convert(T, "imp", S2) 

PARAMETERS
- A: formula
- T: theory
- S1: one of  "andimp" ,  "eq" ,  "impimp" 
- S2: one of  "eq" ,  "or" 

RESULT:  formula resp. theory

SYNOPSIS

- convert  converts certain occurrences of connectives in the formula  A  
  resp. in the theory  T . The result is equivalent to  A  resp. the closed 
  world assumption theories of  T  and the result are equivalent (in  cpc 
  ).
- Two arguments: 
  S1  is  "andimp" : Converts  B & C -> D  into  B -> C -> D . 
  S1  is  "eq" : Converts  B <-> C  into  (B -> C) & (C -> B) . 
  S1  is  "impimp" : Converts  B -> C -> D  into  B & C -> D .
- Three arguments: 
  S2  is  "eq" : Converts  (B -> C) & (B -> C) ,  (B <-> C) & (B -> C) , ... 
  into  B <-> C . Conjunctions in  A  resp. the theory  T  is arranged if 
  conversions are possible. 
  S2  is  "or" : Converts  ~B -> C  into  B v C , and  B -> C  into  ~B v C .

EXAMPLE

> convert((p1 v p2) & p3 & p4 -> p5, "andimp");
	p1 v p2 -> p3 -> p4 -> p5
> convert(p0 & (p2 -> p3) & ((~p5 v p7) & (p1 -> p0)), "imp", "eq");
	p0 & (p2 -> p3) & ((~p5 v p7) & (p1 -> p0))
> convert((p2 -> p1) v (~(p2 & ~p3) -> p0 v p2), "imp", "or");
	~p2 v p1 v (p2 & ~p3 v (p0 v p2))
> convert([p0 -> p1, ~p0 -> p1, ~p2 v p3], "imp", "or");
	[~p0 v p1, p0 v p1, ~p2 v p3]

SEE ALSO
  remove

