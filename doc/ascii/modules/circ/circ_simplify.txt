
simplify
========

simplify formula

SYNTAX
- simplify(A) 
- simplify(A, S) 
- simplify(A, S, N) 
- simplify(T) 
- simplify(T, S) 
- simplify(T, S, N) 

PARAMETERS
- A: formula
- T: theory
- S: one of  "synt" ,  "sort" ,  "provable" 
- N: natural number,  N >= 1 

RESULT:  formula resp. theory

SYNOPSIS

- One argument:  simplify  simplifies the formula  A  resp. the theory  T . 
  Parts that cannot be simplified remain unchanged.
- The simplification relies on the search for `equivalent' subformulas. This 
  search can be influenced by the second and the third argument.
- Second argument: Determines when two subformulas are `equivalent': 
  "synt" : Syntactically equivalent.  true  and  false  are removed. Often 
  faster than  "sort"  and  "provable" . 
  "sort" : Syntactically equivalent modulo ordering.  true  and  false  are 
  removed. 
  "provable" : Provably equivalent. Subformulas that are equivalent to  true 
  or  false  are removed. More powerful than  "synt"  and  "sort" . 
  Default:  "sort" .
- Third argument: Only subformulas with at most  N  alternations of binary 
  connectives in between are compared. 
  Default: infinite. Often a small  N  (e.g. 1 or 2) makes the 
  simplification process faster.
- Case  A : The result is equivalent to  A  (in  cpc ). 
  Case  T : The circumscription theory of  T  (with arbitrary  Lp ,  Lq ) is 
  equivalent to  T  (in  cpc ).
- With  set("infolevel", 3)  you obtain additional information during the 
  simplification process.

EXAMPLE

> simplify(p2 & (p2 -> (p3 -> ~p0)));
	p2 & (p3 -> ~p0)
> simplify(p2 & (~p2 -> (p3 -> ~p0)));
	p2
> simplify(p0 & (p1 v ~p2 -> (p0 -> p2 v ~p3)), "sort", 2);
	p0 & (p1 v ~p2 -> p2 v ~p3)
> simplify(p0 & (p1 v ~p2 -> (p0 -> p2 v ~p3)), "sort");
	p0 & (p2 v ~p3)
> simplify(p1 & (p1 <-> (((p0 -> p1) -> p0) -> p2 v p0)));
	p1
> simplify(p1 & (p1 <-> (((p0 -> p1) -> p0) -> p2 v p0)), "provable");
	p1

SEE ALSO
  convert, remove

