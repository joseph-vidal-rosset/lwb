
cpc example
===========


Language
--------

At first we load the module  cpc .

> load(cpc);
	cpc  user  

Formulas of  cpc  are built from the symbols for conjunction ( & ), 
disjunction ( v ), implication ( -> ), equivalence ( <-> ), negation ( ~ ), 
the two constants  true  and  false , and variables.
Theories are list of formulas.

> a := (p0 -> false) <-> ~(p2 & true v p0);
	p0 -> false <-> ~(p2 & true v p0)
> b := p17 -> p23;
	p17 -> p23
> t := [a, b];
	[p0 -> false <-> ~(p2 & true v p0), p17 -> p23]
> typek(a, "fml");
	true
> typek(b[1], "var");
	true
> typek(t, "theory");
	true

You can also use  and ,  or ,  imp ,  eq ,  not  instead of  & ,  v ,  -> ,  
<-> ,  ~ .

> a1 := p0 & p1 v p2 -> p3 <-> p0; 
	p0 & p1 v p2 -> p3 <-> p0
> a2 := p0 and p1 or p2 imp p3 eq p0; 
	p0 & p1 v p2 -> p3 <-> p0
> a1 = a2;
	true


Normal forms
------------

In classical propositional logic there exists a conjunctive, a disjunctive 
and a negation normal form.

> a := ~(p0 v p1) v p0 & (p1 -> p2);
	~(p0 v p1) v p0 & (p1 -> p2)
> cnf(a);
	(p0 v ~p1) & (p2 v ~p1) & (p2 v ~p0 v ~p1)
> dnf(a);
	p0 & p2 v p0 & ~p1 v ~p0 & ~p1
> nnf(a);
	~p0 & ~p1 v p0 & (~p1 v p2)

All these normal forms are not unique. We give just an example for the case 
of the disjunctive normal form.

> b := ~p1 v p0 & p2;
	~p1 v p0 & p2
> dnfp(b);
	true
> provable(a <-> b);
	true

The result of  cnf  can be much longer than the result of  nnf . But if a 
formula contains equivalencies, already the result of  nnf  can be very 
long.

> c :=   p0  & p1  v p2  & p3  v p4  & p5  v p6  & p7  v p8  & p9
       v p10 & p11 v p12 & p13 v p14 & p15 v p16 & p17;
	p0 & p1 v p2 & p3 v p4 & p5 v p6 & p7 v p8 & p9 v p10 & p11 v p12 & p13 v 
p14 & p15 v p16 & p17
> length(cnf(c));
	9215
> length(nnf(c));
	35
> urquhart(6);
	p1 <-> p2 <-> p3 <-> p4 <-> p5 <-> p6 <-> p1 <-> p2 <-> p3 <-> p4 <-> p5 
<-> p6
> length(nnf(urquhart(6)));
	15354

In order to get a shorter conjunctive normal form one can use the function  
cnfnv . However, this function introduces new variables.

> length(cnfnv(c, "p"));
	299


Typical provable formulas
-------------------------

The connectives  & ,  v ,  <->  are associative and commutative, and for  &  
and  v  the distributivity law holds.

> provable( p0 & (p1 & p2)  <->  (p0 & p1) & p2 );
	true
> provable( p0 v (p1 v p2)  <->  (p0 v p1) v p2 );
	true
> provable( (p0 <-> (p1 <-> p2))  <->  ((p0 <-> p1) <-> p2) );
	true
> provable( p0 & p1  <->  p1 & p0 );
	true
> provable( p0 v p1  <->  p1 v p0 );
	true
> provable( (p0 <-> p1)  <->  (p1 <-> p0) );
	true
> provable( p0 & (p1 v p2)  <->  p0 & p1 v p0 & p2 );
	true
> provable( p0 v p1 & p2  <->  (p0 v p1) & (p0 v p2) );
	true

A -> B  is equivalent to  ~A v B , and  A <-> B  is equivalent to  (A -> B) 
& (B -> A) .

> provable( (p0 -> p1)  <->  (~p0 v p1) );
	true
> provable( (p0 <-> p1)  <->  ((p0 -> p1) & (p1 -> p0)) );
	true

The pigeonhole formula and the formula of Peirce are two examples of 
well-known formulas that are provable in classical propositional logic.

> a := pigeonhole(2);
	(p11 v p12) & (p21 v p22) & (p31 v p32) -> p11 & p21 v p11 & p31 v p21 & 
p31 v p12 & p22 v p12 & p32 v p22 & p32
> provable(a);
	true
> provable(fml("peirce"));
	true

If a formula is provable, then there must be only  true  in the last 
column.

> t := truthtable(fml("peirce"));
	[[[p1, p2], ((p1 -> p2) -> p1) -> p1], [[[false, false], true], [[false, 
true], true], [[true, false], true], [[true, true], true]]]

With the function  display  you obtain a more readable output:

> display(t);
------------------------------------------
| p1    p2    | ((p1 -> p2) -> p1) -> p1 |
------------------------------------------
| false false | true                     |
| false true  | true                     |
| true  false | true                     |
| true  true  | true                     |
------------------------------------------
> display(t, "0", "1", "peirce");
------------------
| p1 p2 | peirce |
------------------
| 0  0  | 1      |
| 0  1  | 1      |
| 1  0  | 1      |
| 1  1  | 1      |
------------------


Typical non-provable formulas
-----------------------------

The connective  ->  is neither associative nor commutative.

> provable( (p0 -> (p1 -> p2))  <->  ((p0 -> p1) -> p2) );
	false
> provable( (p0 -> p1)  <->  (p1 -> p0) );
	false

If a formula  A  is not provable, then there exists a model of its 
negation.

> m := model( ~((p0 -> p1)  <->  (p1 -> p0)) );
	[p0]
> value(m, ~((p0 -> p1)  <->  (p1 -> p0)) );
	true
> value(m, (p0 -> p1)  <->  (p1 -> p0) );
	false

